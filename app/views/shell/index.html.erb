<%= javascript_include_tag "sh/shCore.js", "sh/shAutoloader.js", :cache => false %>
<%= stylesheet_link_tag "sh/shCore.css", "sh/shCoreDefault.css", "sh/shThemeDefault.css", :cache => false %>


<!-- For Tabbing !-->
<script src="http://cdn.jquerytools.org/1.2.5/full/jquery.tools.min.js"></script>
<link rel="stylesheet" type="text/css" href="http://static.flowplayer.org/tools/css/tabs.css" />

<p>You can use Wrest to simply retrieve content from websites, use Ruby hashes to POST form data
and build wrappers around web resources so that you can treat them like Ruby objects.</p>

<p>A few live examples are given below. Checkout the <a href="https://github.com/kaiwren/wrest">Wrest GitHub page</a> for more.</p>

<h3>This is a Ruby shell. You can edit and run the code here.</h3>

<br/>

<ul class="tabs">
  <% code_samples.each do |title, content|  %>
    <li><a href="#"> <%= title %></a></li>
  <%end%>
</ul>

<div class="panes" id="pane">
  <% code_samples.each do |title, content|  %>

    <div>
      <div class="menu">
        <a href="#" class="edit_code menu_link">Edit this code</a>
      </div>

      <!-- this PRE would be reformatted by SyntaxHighlighter !-->
      <div class="formatted_code">
        <pre class="brush: rails"><%= content%></pre>
      </div>

      <!-- the editable area is hidden by default !-->
      <textarea rows="20" cols="120" class="plain_code" style="display: none; overflow: auto; font-size: 14px;"><%= content %></textarea>
    </div>

  <%end%>
</div>


<h3>Output</h3>
<img id="progress_bar" src="/images/progress_bar.gif" style="display: none;"/>

<div id="text_output_div">
  <pre id="text_output_pre">
  </pre>
</div>

<script type="text/javascript">

  function runSyntaxHighlight() {
    SyntaxHighlighter.autoloader('rails         /javascripts/sh/shBrushRuby.js' );
    SyntaxHighlighter.all();
  }

  // Send the script to server to execute and get the output back.
  function run_script(input_code)
  {
    $("#text_output_div").hide();
    $("#progress_bar").show();
    
    $.ajax({
      url: '/execute',
      type: 'POST',
      dataType: 'text/plain',
      data: 'input_code='+escape(input_code),
      success: function(data){
        $("#text_output_pre").html(data)
      },
      error: function(data){
        alert("network/server error");
      },
      complete: function(data) {
        $("#progress_bar").hide(); $("#text_output_div").show();
      }
    });
  };

  function run_and_format_current_code_snippet() {
    var current_pane=tabs_api.getCurrentPane();
    
    input_code = current_pane.find("textarea").hide().val();

    // SyntaxHighlight the user's script
    formatted_code = current_pane.find("div.formatted_code");
    formatted_code.html('<pre class="brush: rails">' + input_code + '</pre>')
    formatted_code.show();

    runSyntaxHighlight();
    run_script(input_code);
  }


  var tabs_api; // Exposes the methods of the Tab control.

  $(document).ready(function() {

    // Initialize the tabs.
    $("ul.tabs").tabs("div.panes > div");
    tabs_api = $("ul.tabs").data("tabs")

    // Fires up as soon as a user clicks a tab (irrespective of
    // whether the corresponding pane is loaded or not)
    tabs_api.onClick(function() {
      $("#text_output_div").hide();
      $("#progress_bar").show();

      // Who likes ugly hacks? But this Tab plugin doesn't have an event
      // that fires only after a pane is displayed.
      setTimeout(run_and_format_current_code_snippet, 500);
    });

    // Do this when the page loads.
    run_and_format_current_code_snippet()
  });


  $("a.edit_code").click( function() {
    var current_pane=tabs_api.getCurrentPane()

    if($(this).html() == "Edit this code") {
      $(this).html("Run this code");

      current_pane.find("div.formatted_code").hide();
      current_pane.find("textarea").show();   // Show the code entry box.
    }
    else {
      run_and_format_current_code_snippet();
      $(this).html("Edit this code");
    }
  });

</script>
